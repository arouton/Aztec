#include <limits>
#include <iostream>

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4::azVector4(azFloat a_fX, azFloat a_fY, azFloat a_fZ, azFloat a_fW)
	: m_fX(a_fX)
	, m_fY(a_fY)
	, m_fZ(a_fZ)
	, m_fW(a_fW)
{}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline void azVector4::Set(azFloat a_fX, azFloat a_fY, azFloat a_fZ, azFloat a_fW)
{
    m_fX = a_fX;
    m_fY = a_fY;
    m_fZ = a_fZ;
    m_fW = a_fW;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azFloat azVector4::GetLength() const
{
    return std::sqrt(GetLengthSq());
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azFloat azVector4::GetLengthSq() const
{
    return m_fX * m_fX + m_fY * m_fY + m_fZ * m_fZ + m_fW * m_fW;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline void azVector4::SelfNormalize()
{
    azFloat fNorm = GetLength();

    if (std::abs(fNorm) > std::numeric_limits<azFloat>::epsilon())
    {
        m_fX /= fNorm;
        m_fY /= fNorm;
        m_fZ /= fNorm;
        m_fW /= fNorm;
    }
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4 azVector4::operator +() const
{
    return rThis;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4 azVector4::operator -() const
{
    return azVector4(-m_fX, -m_fY, -m_fZ, -m_fW);
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4 azVector4::operator +(const azVector4& a_f4Operand) const
{
    return azVector4(m_fX + a_f4Operand.m_fX, m_fY + a_f4Operand.m_fY, m_fZ + a_f4Operand.m_fZ, m_fW + a_f4Operand.m_fW);
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4 azVector4::operator -(const azVector4& a_f4Operand) const
{
    return azVector4(m_fX - a_f4Operand.m_fX, m_fY - a_f4Operand.m_fY, m_fZ - a_f4Operand.m_fZ, m_fW - a_f4Operand.m_fW);
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline const azVector4& azVector4::operator +=(const azVector4& a_f4Operand)
{
    m_fX += a_f4Operand.m_fX;
    m_fY += a_f4Operand.m_fY;
    m_fZ += a_f4Operand.m_fZ;
    m_fW += a_f4Operand.m_fW;

    return rThis;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline const azVector4& azVector4::operator -=(const azVector4& a_f4Operand)
{
    m_fX -= a_f4Operand.m_fX;
    m_fY -= a_f4Operand.m_fY;
    m_fZ -= a_f4Operand.m_fZ;
    m_fW -= a_f4Operand.m_fW;

    return rThis;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4 azVector4::operator *(azFloat a_fOperand) const
{
    return azVector4(m_fX * a_fOperand, m_fY * a_fOperand, m_fZ * a_fOperand, m_fW * a_fOperand);
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4 azVector4::operator /(azFloat a_fOperand) const
{
    return azVector4(m_fX / a_fOperand, m_fY / a_fOperand, m_fZ / a_fOperand, m_fW / a_fOperand);
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline const azVector4& azVector4::operator *=(azFloat a_fOperand)
{
    m_fX *= a_fOperand;
    m_fY *= a_fOperand;
    m_fZ *= a_fOperand;
    m_fW *= a_fOperand;

    return rThis;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline const azVector4& azVector4::operator /=(azFloat a_fOperand)
{
    m_fX /= a_fOperand;
    m_fY /= a_fOperand;
    m_fZ /= a_fOperand;
    m_fW /= a_fOperand;

    return rThis;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline bool azVector4::operator ==(const azVector4& a_f4Operand) const
{
    return ((std::abs(m_fX - a_f4Operand.m_fX) <= std::numeric_limits<azFloat>::epsilon()) &&
            (std::abs(m_fY - a_f4Operand.m_fY) <= std::numeric_limits<azFloat>::epsilon()) &&
            (std::abs(m_fZ - a_f4Operand.m_fZ) <= std::numeric_limits<azFloat>::epsilon()) &&
            (std::abs(m_fW - a_f4Operand.m_fW) <= std::numeric_limits<azFloat>::epsilon()));
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline bool azVector4::operator !=(const azVector4& a_f4Operand) const
{
    return !(rThis == a_f4Operand);
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4::operator azFloat*()
{
    return &m_fX;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4::operator const azFloat*() const
{
    return &m_fX;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4 operator *(azFloat a_fOperand1, const azVector4& a_f4Operand2)
{
    return a_f4Operand2 * a_fOperand1;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azFloat VectorDot(const azVector4& a_f4Operand1, const azVector4& a_f4Operand2)
{
    return a_f4Operand1.m_fX * a_f4Operand2.m_fX + a_f4Operand1.m_fY * a_f4Operand2.m_fY + a_f4Operand1.m_fZ * a_f4Operand2.m_fZ + a_f4Operand1.m_fW * a_f4Operand2.m_fW;
}

//----------------------------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------------------------
inline azVector4 VectorCross(const azVector4& a_f4Operand1, const azVector4& a_f4Operand2)
{
    // ?? Correct ??
    return azVector4(a_f4Operand1.m_fY * a_f4Operand2.m_fZ - a_f4Operand1.m_fZ * a_f4Operand2.m_fY, a_f4Operand1.m_fZ * a_f4Operand2.m_fW - a_f4Operand1.m_fW * a_f4Operand2.m_fZ, a_f4Operand1.m_fW * a_f4Operand2.m_fX - a_f4Operand1.m_fX * a_f4Operand2.m_fW, a_f4Operand1.m_fX * a_f4Operand2.m_fY - a_f4Operand1.m_fY * a_f4Operand2.m_fX);
}


